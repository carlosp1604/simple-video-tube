// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Producer {
  id               String     @id
  slug             String
  name             String
  description      String?
  parentProducer   Producer?  @relation("parentProducer", fields: [parentProducerId], references: [id])
  parentProducerId String?    @map("parent_producer_id")
  imageUrl         String?    @map("image_url")
  viewsCount       BigInt     @default(0) @map("views_count")
  createdAt        DateTime   @map("created_at")
  updatedAt        DateTime   @map("updated_at")
  deletedAt        DateTime?  @map("deleted_at")
  childProducers   Producer[] @relation("parentProducer")
  posts            Post[]

  @@map("producers")
}

model Post {
  id           String          @id
  title        String          @db.Text
  description  String          @db.Text
  slug         String          @unique
  viewsCount   BigInt          @default(0) @map("views_count")
  duration     Int
  resolution   Int
  trailerUrl   String?         @map("trailer_url")
  thumbnailUrl String          @map("thumbnail_url")
  externalUrl  String?         @map("external_url")
  createdAt    DateTime        @map("created_at")
  updatedAt    DateTime        @map("updated_at")
  deletedAt    DateTime?       @map("deleted_at")
  publishedAt  DateTime?       @map("published_at")
  releaseDate  DateTime?       @map("release_date")
  producer     Producer?       @relation(fields: [producerId], references: [id])
  producerId   String?         @map("producer_id")
  actor        Actor?          @relation(fields: [actorId], references: [id])
  actorId      String?         @map("actor_id")
  categories   PostCategory[]
  actors       PostActor[]
  comments     PostComment[]
  reactions    Reaction[]      @relation("Reaction")
  translations Translatation[] @relation("PostTranslation")
  postMedia    PostMedia[]
  reports      Report[]

  @@map("posts")
}

model Category {
  id           String          @id
  slug         String
  name         String
  description  String?
  viewsCount   BigInt          @default(0) @map("views_count")
  imageUrl     String?         @map("image_url")
  createdAt    DateTime        @map("created_at")
  updatedAt    DateTime        @map("updated_at")
  deletedAt    DateTime?       @map("deleted_at")
  posts        PostCategory[]
  translations Translatation[] @relation("CategoryTranslation")

  @@map("categories")
}

model PostCategory {
  post       Post      @relation(fields: [postId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  postId     String    @map("post_id")
  categoryId String    @map("category_id")
  createdAt  DateTime  @map("created_at")
  updatedAt  DateTime  @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@id([postId, categoryId])
  @@map("post_categories")
}

enum ReactionableType {
  Post
  PostComment
}

model Reaction {
  reactionableId   String           @map("reactionable_id")
  reactionType     String           @map("reaction_type")
  userIp           String           @map("user_ip")
  reactionableType ReactionableType @map("reactionable_type")

  post        Post?        @relation("Reaction", fields: [reactionableId], references: [id], map: "post_reaction")
  postComment PostComment? @relation("PostCommentReaction", fields: [reactionableId], references: [id], map: "post_comment_reaction")

  createdAt DateTime  @map("created_at")
  updatedAt DateTime  @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([reactionableType, reactionableId, userIp])
  @@map("reactions")
}

model PostComment {
  id              String        @id
  comment         String
  post            Post?         @relation(fields: [postId], references: [id])
  postId          String?       @map("post_id")
  parentComment   PostComment?  @relation("Replies", fields: [parentCommentId], references: [id])
  parentCommentId String?       @map("parent_comment_id")
  userIp          String        @map("user_ip")
  userName        String        @map("user_name")
  createdAt       DateTime      @map("created_at")
  updatedAt       DateTime      @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  childComments   PostComment[] @relation("Replies")
  reactions       Reaction[]    @relation("PostCommentReaction")

  @@map("post_comments")
}

model Actor {
  id         String      @id
  slug       String
  name       String
  imageUrl   String?     @map("image_url")
  viewsCount BigInt      @default(0) @map("views_count")
  createdAt  DateTime    @map("created_at")
  updatedAt  DateTime    @map("updated_at")
  deletedAt  DateTime?   @map("deleted_at")
  postActors PostActor[]
  posts      Post[]

  @@map("actors")
}

model PostActor {
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @map("post_id")
  actor     Actor     @relation(fields: [actorId], references: [id])
  actorId   String    @map("actor_id")
  createdAt DateTime  @map("created_at")
  updatedAt DateTime  @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([postId, actorId])
  @@map("post_actors")
}

enum TranslatableType {
  Post
  Category
  Actor
  Producer
}

model Translatation {
  translatableId   String           @map("translatable_id")
  field            String
  value            String
  translatableType TranslatableType @map("translatable_type")

  post     Post?     @relation("PostTranslation", fields: [translatableId], references: [id], map: "post_translation")
  category Category? @relation("CategoryTranslation", fields: [translatableId], references: [id], map: "category_translation")

  language  String
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  @@id([translatableId, field, translatableType, language])
  @@map("translations")
}

model PostMedia {
  id            String     @id
  postId        String     @map("post_id")
  post          Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  type          String
  title         String
  thumbnailUrl  String?    @map("thumbnail_url")
  removalReason String?    @map("removal_reason")
  createdAt     DateTime   @map("created_at")
  updatedAt     DateTime   @map("updated_at")
  deletedAt     DateTime?  @map("deleted_at")
  mediaUrls     MediaUrl[]

  @@map("post_media")
}

model MediaProvider {
  id                    String     @id
  name                  String
  logoUrl               String     @map("logo_url")
  advertisingLevel      Int        @map("advertising_level")
  downloadSpeed         Int        @map("download_speed")
  paymentRequired       Boolean    @map("payment_required")
  freeDownloadsDay      Int        @default(0) @map("free_downloads_day")
  delayBetweenDownloads Int        @default(0) @map("delay_between_downloads")
  refUrl                String     @map("ref_url")
  maxResolution         String     @map("max_resolution")
  multiQuality          Boolean    @default(false) @map("multi_quality")
  createdAt             DateTime   @map("created_at")
  updatedAt             DateTime   @map("updated_at")
  mediaUrls             MediaUrl[]

  @@map("media_providers")
}

model MediaUrl {
  mediaProviderId String        @map("media_provider_id")
  provider        MediaProvider @relation(fields: [mediaProviderId], references: [id], onDelete: Cascade)
  postMediaId     String        @map("post_media_id")
  postMedia       PostMedia     @relation(fields: [postMediaId], references: [id], onDelete: Cascade)
  url             String
  type            String
  title           String
  createdAt       DateTime      @map("created_at")
  updatedAt       DateTime      @map("updated_at")

  @@id([url, postMediaId, type])
  @@map("media_urls")
}

model Report {
  id        String   @id
  userIp    String   @map("user_ip")
  userName  String   @map("user_name")
  userEmail String   @map("user_email")
  content   String
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  type      String
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  @@index([userIp, postId, type])
  @@map("reports")
}
